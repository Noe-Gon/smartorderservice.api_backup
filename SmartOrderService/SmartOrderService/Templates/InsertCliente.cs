// ------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión del motor en tiempo de ejecución: 14.0.0.0
//  
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace SmartOrderService.Templates
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Users\fquintalc\Documents\Proyectos\WorkByCloudDSServiceApi\SmartOrderService\SmartOrderService\Templates\InsertCliente.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "14.0.0.0")]
    public partial class InsertCliente : InsertClienteBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write(@"<?xml version=""1.0"" encoding=""utf-8""?>
<soap:Envelope xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xmlns:xsd=""http://www.w3.org/2001/XMLSchema"" xmlns:soap=""http://schemas.xmlsoap.org/soap/envelope/"">
  <soap:Body>
    <InsertCliente xmlns=""http://tempuri.org/"">
      <Usuario>");
            
            #line 17 "C:\Users\fquintalc\Documents\Proyectos\WorkByCloudDSServiceApi\SmartOrderService\SmartOrderService\Templates\InsertCliente.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.User));
            
            #line default
            #line hidden
            this.Write("</Usuario>\r\n      <Password>");
            
            #line 18 "C:\Users\fquintalc\Documents\Proyectos\WorkByCloudDSServiceApi\SmartOrderService\SmartOrderService\Templates\InsertCliente.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.Password));
            
            #line default
            #line hidden
            this.Write("</Password>\r\n      <datoscli>\r\n        <Nombre>");
            
            #line 20 "C:\Users\fquintalc\Documents\Proyectos\WorkByCloudDSServiceApi\SmartOrderService\SmartOrderService\Templates\InsertCliente.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.Customer.name));
            
            #line default
            #line hidden
            this.Write("</Nombre>\r\n        <RFC>");
            
            #line 21 "C:\Users\fquintalc\Documents\Proyectos\WorkByCloudDSServiceApi\SmartOrderService\SmartOrderService\Templates\InsertCliente.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.CustomerData.ftr));
            
            #line default
            #line hidden
            this.Write("</RFC>\r\n        <Calle>");
            
            #line 22 "C:\Users\fquintalc\Documents\Proyectos\WorkByCloudDSServiceApi\SmartOrderService\SmartOrderService\Templates\InsertCliente.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.CustomerData.address_street));
            
            #line default
            #line hidden
            this.Write("</Calle>\r\n        <NoInterior></NoInterior>\r\n        <NoExterior>");
            
            #line 24 "C:\Users\fquintalc\Documents\Proyectos\WorkByCloudDSServiceApi\SmartOrderService\SmartOrderService\Templates\InsertCliente.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.CustomerData.address_number));
            
            #line default
            #line hidden
            this.Write("</NoExterior>\r\n        <CteCP>");
            
            #line 25 "C:\Users\fquintalc\Documents\Proyectos\WorkByCloudDSServiceApi\SmartOrderService\SmartOrderService\Templates\InsertCliente.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(String.IsNullOrEmpty(this.CustomerData.postal_code) ? "0" : this.CustomerData.postal_code));
            
            #line default
            #line hidden
            this.Write("</CteCP>\r\n        <Colonia></Colonia>\r\n        <Localidad>");
            
            #line 27 "C:\Users\fquintalc\Documents\Proyectos\WorkByCloudDSServiceApi\SmartOrderService\SmartOrderService\Templates\InsertCliente.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.CustomerData.suburb));
            
            #line default
            #line hidden
            this.Write("</Localidad>\r\n        <MunicipioDel>");
            
            #line 28 "C:\Users\fquintalc\Documents\Proyectos\WorkByCloudDSServiceApi\SmartOrderService\SmartOrderService\Templates\InsertCliente.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.CustomerData.suburb));
            
            #line default
            #line hidden
            this.Write("</MunicipioDel>\r\n        <Estado>");
            
            #line 29 "C:\Users\fquintalc\Documents\Proyectos\WorkByCloudDSServiceApi\SmartOrderService\SmartOrderService\Templates\InsertCliente.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(String.IsNullOrEmpty(this.CustomerData.state) ? "Sin informacion" : this.CustomerData.state));
            
            #line default
            #line hidden
            this.Write("</Estado>\r\n        <Pais>");
            
            #line 30 "C:\Users\fquintalc\Documents\Proyectos\WorkByCloudDSServiceApi\SmartOrderService\SmartOrderService\Templates\InsertCliente.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.CustomerData.country));
            
            #line default
            #line hidden
            this.Write("</Pais>\r\n        <Email>");
            
            #line 31 "C:\Users\fquintalc\Documents\Proyectos\WorkByCloudDSServiceApi\SmartOrderService\SmartOrderService\Templates\InsertCliente.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.Customer.getSingleEmail()));
            
            #line default
            #line hidden
            this.Write("</Email>\r\n        <EsVirtual>");
            
            #line 32 "C:\Users\fquintalc\Documents\Proyectos\WorkByCloudDSServiceApi\SmartOrderService\SmartOrderService\Templates\InsertCliente.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.IsVirtual));
            
            #line default
            #line hidden
            this.Write("</EsVirtual>\r\n        <Sucural>");
            
            #line 33 "C:\Users\fquintalc\Documents\Proyectos\WorkByCloudDSServiceApi\SmartOrderService\SmartOrderService\Templates\InsertCliente.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.BranchName));
            
            #line default
            #line hidden
            this.Write("</Sucural>\r\n        <Observaciones>");
            
            #line 34 "C:\Users\fquintalc\Documents\Proyectos\WorkByCloudDSServiceApi\SmartOrderService\SmartOrderService\Templates\InsertCliente.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.Observations));
            
            #line default
            #line hidden
            this.Write("</Observaciones>\r\n        <Contacto>");
            
            #line 35 "C:\Users\fquintalc\Documents\Proyectos\WorkByCloudDSServiceApi\SmartOrderService\SmartOrderService\Templates\InsertCliente.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.Customer.contact));
            
            #line default
            #line hidden
            this.Write("</Contacto>\r\n      </datoscli>\r\n    </InsertCliente>\r\n  </soap:Body>\r\n</soap:Enve" +
                    "lope>");
            return this.GenerationEnvironment.ToString();
        }
        
        #line 1 "C:\Users\fquintalc\Documents\Proyectos\WorkByCloudDSServiceApi\SmartOrderService\SmartOrderService\Templates\InsertCliente.tt"

private global::SmartOrderService.DB.so_customer _CustomerField;

/// <summary>
/// Access the Customer parameter of the template.
/// </summary>
private global::SmartOrderService.DB.so_customer Customer
{
    get
    {
        return this._CustomerField;
    }
}

private global::SmartOrderService.DB.so_customer_data _CustomerDataField;

/// <summary>
/// Access the CustomerData parameter of the template.
/// </summary>
private global::SmartOrderService.DB.so_customer_data CustomerData
{
    get
    {
        return this._CustomerDataField;
    }
}

private string _UserField;

/// <summary>
/// Access the User parameter of the template.
/// </summary>
private string User
{
    get
    {
        return this._UserField;
    }
}

private string _PasswordField;

/// <summary>
/// Access the Password parameter of the template.
/// </summary>
private string Password
{
    get
    {
        return this._PasswordField;
    }
}

private string _IsVirtualField;

/// <summary>
/// Access the IsVirtual parameter of the template.
/// </summary>
private string IsVirtual
{
    get
    {
        return this._IsVirtualField;
    }
}

private string _ObservationsField;

/// <summary>
/// Access the Observations parameter of the template.
/// </summary>
private string Observations
{
    get
    {
        return this._ObservationsField;
    }
}

private string _BranchNameField;

/// <summary>
/// Access the BranchName parameter of the template.
/// </summary>
private string BranchName
{
    get
    {
        return this._BranchNameField;
    }
}


/// <summary>
/// Initialize the template
/// </summary>
public virtual void Initialize()
{
    if ((this.Errors.HasErrors == false))
    {
bool CustomerValueAcquired = false;
if (this.Session.ContainsKey("Customer"))
{
    this._CustomerField = ((global::SmartOrderService.DB.so_customer)(this.Session["Customer"]));
    CustomerValueAcquired = true;
}
if ((CustomerValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("Customer");
    if ((data != null))
    {
        this._CustomerField = ((global::SmartOrderService.DB.so_customer)(data));
    }
}
bool CustomerDataValueAcquired = false;
if (this.Session.ContainsKey("CustomerData"))
{
    this._CustomerDataField = ((global::SmartOrderService.DB.so_customer_data)(this.Session["CustomerData"]));
    CustomerDataValueAcquired = true;
}
if ((CustomerDataValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("CustomerData");
    if ((data != null))
    {
        this._CustomerDataField = ((global::SmartOrderService.DB.so_customer_data)(data));
    }
}
bool UserValueAcquired = false;
if (this.Session.ContainsKey("User"))
{
    this._UserField = ((string)(this.Session["User"]));
    UserValueAcquired = true;
}
if ((UserValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("User");
    if ((data != null))
    {
        this._UserField = ((string)(data));
    }
}
bool PasswordValueAcquired = false;
if (this.Session.ContainsKey("Password"))
{
    this._PasswordField = ((string)(this.Session["Password"]));
    PasswordValueAcquired = true;
}
if ((PasswordValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("Password");
    if ((data != null))
    {
        this._PasswordField = ((string)(data));
    }
}
bool IsVirtualValueAcquired = false;
if (this.Session.ContainsKey("IsVirtual"))
{
    this._IsVirtualField = ((string)(this.Session["IsVirtual"]));
    IsVirtualValueAcquired = true;
}
if ((IsVirtualValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("IsVirtual");
    if ((data != null))
    {
        this._IsVirtualField = ((string)(data));
    }
}
bool ObservationsValueAcquired = false;
if (this.Session.ContainsKey("Observations"))
{
    this._ObservationsField = ((string)(this.Session["Observations"]));
    ObservationsValueAcquired = true;
}
if ((ObservationsValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("Observations");
    if ((data != null))
    {
        this._ObservationsField = ((string)(data));
    }
}
bool BranchNameValueAcquired = false;
if (this.Session.ContainsKey("BranchName"))
{
    this._BranchNameField = ((string)(this.Session["BranchName"]));
    BranchNameValueAcquired = true;
}
if ((BranchNameValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("BranchName");
    if ((data != null))
    {
        this._BranchNameField = ((string)(data));
    }
}


    }
}


        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "14.0.0.0")]
    public class InsertClienteBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
